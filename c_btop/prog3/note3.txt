/* Ch3 Make decisions */

# if statement
if(expression)
Statement1;
=
if(expression) Statement1;

# if boolean expression
if(count)
printf("The value of count is not zero.");
// This will only produce output if count is not 0, because a 0 value for count will mean the if
expression is false.//

#Nested if statements
if(expression1) /* Weather is good? */
{
    StatementA; /* Yes - Go out in the yard */
    if(expression2) /* Cool enough? */
        StatementB; /* Yes - Sit in the sun */
    else
        StatementC; /* No - Sit in the shade */
}
else
    StatementD; /* Weather not good - stay in */
Statement E; /* Drink lemonade in any event */

# More relational operators
atements. These three additional operators make up the complete set:
• >= is greater than or equal to
• <= is less than or equal to
• != is not equal to

# char type reminder
'Z' >= 'A' 'Q' <= 'P' 'B' <= 'b' 'B' != 66
With the ASCII values of the characters in mind, the first expression is true, because 'Z', which
has the code value 90, comes after 'A', which has the code value 65. The second is false, as 'Q'
doesn’t come before 'P'. The third is true. This is because in ASCII code lowercase letters are 32
higher than their uppercase equivalents. The last is false. The value 66 is indeed the decimal ASCII
representation for the character 'B'.

# tolower(), toupper()
#include <ctype.h>

# towlower(), towupper()
#include <wctype.h>

# Logical operators
1. && (AND)
Test1 && Test2 

2. || (OR)
Test1 || Test2

3. ! (NOT)
!Test1

# Conditional operator
condition (?,>, <, >=, <=, ==, !=) expression1 : expression2

# Operator precedence
Age >= 25 && Harvard || Yale
Unfortunately, this will result in howls of protest because you’ll now accept Yale graduates who
are under 25. In fact, this statement will accept Yale graduates of any age. 

# if, else if, else
if(expression1)
    Statement1;
else if(expression2)
    Statement2;
else if(expression3)
    Statement3;
else
    Statement4;

iteration ends when the condition is true. 
If statement1 is true, statement2,3,4 are not executed.
If all statements are false, statement4 is executed.
IF statement4 is false, null is executed.

# switch statment
switch(ticket_number)
{
    case 35:
        printf("Congratulations! You win first prize!");
        break;
    case 122:
        printf("Congratulations! You win second prize!");
        break;
    case 78:
        printf("Congratulations! You win third prize!");
        break;
    default:
        printf("Too bad, you lose.");
}       

ticket_number is a variable that holds the number of the ticket.
break statement is to skip over the other statements within that block(closing brace).
If the value of ticke_number differs from every one of the case values, the statements foloowing default are executed.
The case values must all be constant expressions.
case values must be integer and unique.(including enumeration)

# isalpha() in switch statement (ctype.h)
return non-zero integer if the character is a alphabetic character.
return 0 if the character is not a alphabetic character.

ex)
if(!isalpha(ch))
printf("The character is not a letter.");
else
{
switch(tolower(ch))

# goto statement
if(dice == 6)
    goto Waldorf;
else
    goto Jail; 

Waldorf:
    comfort = high;
    ...
Jail: 
    comfort = low;
    ...

avoid too many goto statements.
